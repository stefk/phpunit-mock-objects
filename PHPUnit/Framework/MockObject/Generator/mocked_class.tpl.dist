{prologue}{class_declaration}
{
    private static $__phpunit_staticInvocationMocker;
    private $__phpunit_invocationMocker;

{clone}{mocked_methods}
    public function expects($matcher = null)
    {
        $matcher = self::__phpunit_resolveMatcher($matcher);

        return $this->__phpunit_getInvocationMocker()->expects($matcher);
    }

    public static function staticExpects(PHPUnit_Framework_MockObject_Matcher_Invocation $matcher)
    {
        $matcher = self::__phpunit_resolveMatcher($matcher);

        return self::__phpunit_getStaticInvocationMocker()->expects($matcher);
    }

    public function __phpunit_getInvocationMocker()
    {
        if ($this->__phpunit_invocationMocker === NULL) {
            $this->__phpunit_invocationMocker = new PHPUnit_Framework_MockObject_InvocationMocker;
        }

        return $this->__phpunit_invocationMocker;
    }

    public static function __phpunit_getStaticInvocationMocker()
    {
        if (self::$__phpunit_staticInvocationMocker === NULL) {
            self::$__phpunit_staticInvocationMocker = new PHPUnit_Framework_MockObject_InvocationMocker;
        }

        return self::$__phpunit_staticInvocationMocker;
    }

    public function __phpunit_hasMatchers()
    {
        return self::__phpunit_getStaticInvocationMocker()->hasMatchers() ||
               $this->__phpunit_getInvocationMocker()->hasMatchers();
    }

    public function __phpunit_verify()
    {
        self::__phpunit_getStaticInvocationMocker()->verify();
        $this->__phpunit_getInvocationMocker()->verify();
    }

    public function __phpunit_cleanup()
    {
        self::$__phpunit_staticInvocationMocker = NULL;
        $this->__phpunit_invocationMocker       = NULL;
    }

    private static function __phpunit_resolveMatcher($matcher)
    {
        if (is_null($matcher)) {
            $matcher = new PHPUnit_Framework_MockObject_Matcher_InvokedAtLeastOnce;
        } elseif (is_int($matcher)) {
            $matcher = new PHPUnit_Framework_MockObject_Matcher_InvokedCount($matcher);
        } elseif (!$matcher instanceof PHPUnit_Framework_MockObject_Matcher_Invocation) {
            throw new InvalidArgumentException();
        }

        return $matcher;
    }
}{epilogue}
